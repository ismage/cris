package storages

import (
	"errors"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/ktr0731/cris/server/domain/repositories"
	"github.com/ktr0731/cris/server/usecases"
	"github.com/ktr0731/cris/server/utils"

	"golang.org/x/sync/syncmap"
)

type MockStorageAdapter struct {
	storage syncmap.Map
	url     syncmap.Map
}

func (s *MockStorageAdapter) Upload(name string, content io.Reader) (string, error) {
	// name is used to only file name
	// actual key url is generated by object storage
	b, err := ioutil.ReadAll(content)
	if err != nil {
		return "", err
	}
	if len(b) == 0 {
		return "", usecases.ErrEmptyContent
	}

	s.storage.Store(name, content)

	url := fmt.Sprintf("https://example.com/%s", utils.NewUUID())
	s.url.Store(url, name)
	return url, nil
}

func (s *MockStorageAdapter) Download(url string) (io.ReadCloser, error) {
	v, ok := s.url.Load(url)
	if !ok {
		return nil, repositories.ErrNotFound
	}
	url, ok = v.(string)
	if !ok {
		return nil, errors.New("type assertion failed")
	}

	v, ok = s.storage.Load(url)
	if !ok {
		return nil, repositories.ErrNotFound
	}
	r, ok := v.(io.Reader)
	if !ok {
		return nil, errors.New("type assertion failed")
	}
	return ioutil.NopCloser(r), nil
}

func NewMockStorage() *MockStorageAdapter {
	return &MockStorageAdapter{}
}
